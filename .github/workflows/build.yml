name: Build Wails App

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME: ${{ github.event.repository.name }}  # 自动使用仓库名

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: 'linux/amd64'
            os: 'ubuntu-latest'
            build_name: 'linux-amd64'
            extension: ''
          - platform: 'windows/amd64'
            os: 'windows-latest'
            build_name: 'windows-amd64'
            extension: '.exe'
          - platform: 'darwin/amd64'
            os: 'macos-latest'
            build_name: 'darwin-amd64'
            extension: '.app'
          - platform: 'darwin/arm64'
            os: 'macos-latest'
            build_name: 'darwin-arm64'
            extension: '.app'

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'  # 根据你的项目调整版本

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './app/package-lock.json'

    # Linux特定设置
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          gcc-multilib \
          gcc-mingw-w64

    # Windows特定设置
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # 安装TDM-GCC或其他CGO需要的工具
        choco install tdm-gcc-webdl -y
        # 或者使用MSYS2
        # choco install msys2 -y

    # macOS特定设置
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # 安装Xcode命令行工具（通常已预装）
        xcode-select --install || true

    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

    - name: Install frontend dependencies
      run: |
        cd ./app
        npm install

    - name: Build application
      env:
        CGO_ENABLED: 1
      run: |
        wails build -platform ${{ matrix.platform }} -clean

    # 设置动态变量
    - name: Set build paths
      id: paths
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "build_path=./build/bin/${{ env.APP_NAME }}${{ matrix.extension }}" >> $GITHUB_OUTPUT
          echo "asset_name=${{ env.APP_NAME }}-${{ matrix.build_name }}${{ matrix.extension }}" >> $GITHUB_OUTPUT
        else
          echo "build_path=./build/bin/${{ env.APP_NAME }}${{ matrix.extension }}" >> $GITHUB_OUTPUT
          echo "asset_name=${{ env.APP_NAME }}-${{ matrix.build_name }}${{ matrix.extension }}" >> $GITHUB_OUTPUT
        fi



    # 创建压缩包
    - name: Create archive
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          tar -czf ${{ steps.paths.outputs.asset_name }}.tar.gz -C ./build/bin .
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ${{ steps.paths.outputs.asset_name }}.zip ./build/bin/*
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          tar -czf ${{ steps.paths.outputs.asset_name }}.tar.gz -C ./build/bin .
        fi

    # 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.paths.outputs.asset_name }}
        path: |
          ${{ steps.paths.outputs.asset_name }}.*
        retention-days: 5

  # 发布Release（仅在打tag时执行）
  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.tar.gz
          **/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}